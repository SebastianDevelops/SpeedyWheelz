@model SpeedyWheelz.Models.Address
@using System.Configuration

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var places = ConfigurationManager.AppSettings["googlePlaces"].ToString();
}

@Scripts.Render("~/bundles/jquery")

<style>
    .gradient-custom {
        background: -webkit-linear-gradient(left, #3931af, #00c6ff);
    }

    .card-custom {
        border-bottom-left-radius: 10% 50%;
        border-top-left-radius: 10% 50%;
        background-color: #f8f9fa;
    }


    .input-custom {
        background-color: white;
    }

    .white-text {
        color: hsl(52, 0%, 98%);
        font-weight: 100;
        font-size: 14px;
    }

    .back-button {
        background-color: hsl(52, 0%, 98%);
        font-weight: 700;
        color: black;
        margin-top: 50px;
    }
</style>
<script>
    $(document).ready(function () {
        $('#Street').val('@Model.Street');
        $('#FirstName').val('@Model.FirstName');
        $('#FirstNameHidden').val('@Model.FirstName');
        $('#LastName').val('@Model.LastName');
        $('#LastNameHidden').val('@Model.LastName');
    });
</script>

<script>
    let autocomplete;
    const center = { lat: -26.4208498, lng: 27.8081384 };
    // Create a bounding box with sides ~10km away from the center point
    const defaultBounds = {
        north: center.lat + 0.18,
        south: center.lat - 0.18,
        east: center.lng + 0.18,
        west: center.lng - 0.18,
    };

    var lat = ''
    var long = ''

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            window.alert("Geolocation is not supported by this browser.");
        }
    }

    function showPosition(position) {
        lat = position.coords.latitude

        long = position.coords.longitude;
    }

    function initAutocomplete() {
        const geocoder = new google.maps.Geocoder();

        document.getElementById("liveLocation").addEventListener("click", () => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((position) => {
                    lat = position.coords.latitude;
                    long = position.coords.longitude;

                    geocodeLatLng(geocoder);
                }, () => {
                    window.alert("Geolocation failed.");
                });
            } else {
                window.alert("Geolocation is not supported by this browser.");
            }
        });

        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('Street'),
            {
                bounds: defaultBounds,
                types: ['address'],
                componentRestrictions: { 'country': 'za' },
                fields: ['place_id', 'geometry', 'name']
            });

        autocomplete.addListener('place_changed', onPlaceChnaged);
    }

    function onPlaceChnaged() {
        var place = autocomplete.getPlace();

        if (!place.geometry) {
            document.getElementById('Street').placeholder = 'Enter your address';
        } else {
            document.getElementById('details').innerHTML = place.name;
        }
    }

    function geocodeLatLng(geocoder) {
        const latlng = {
            lat: lat,
            lng: long,
        };

        geocoder
            .geocode({ location: latlng })
            .then((response) => {
                if (response.results[0]) {
                    $('#Street').val(response.results[0].formatted_address);
                    console.log(response.results[0].formatted_address);
                } else {
                    window.alert("No results found");
                }
            })
            .catch((e) => window.alert("Geocoder failed due to: " + e));
    }

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCc58KYXWOLbA0-1yes8IoOPPsuSi8clzo&libraries=places,geocoding&callback=initAutocomplete" async defer>
</script>
@*
    <script>
        let autocomplete;
        const center = { lat: -26.4208498, lng: 27.8081384 };
        // Create a bounding box with sides ~10km away from the center point
        const defaultBounds = {
            north: center.lat + 0.18,
            south: center.lat - 0.18,
            east: center.lng + 0.18,
            west: center.lng - 0.18,
        };

        function intiAutoComplete() {
            automcomplete = new google.maps.places.Autocomplete(
                document.getElementById('Street'),
                {
                    bounds: defaultBounds,
                    types: ['address'],
                    componentRestrictions: { country: 'za' },
                    fields: ['place_id', 'geometry', 'name']
                });

            autocomplete.addListener('place_changed', onPlaceChnaged);
        }

        function onPlaceChnaged() {
            var place = autocomplete.getPlace();

            if (!place.geometry) {
                document.getElementById('Street').placeholder = 'Enter your address';
            } else {
                document.getElementById('details').innerHTML = place.name;
            }
        }
    </script>
*@



<div class="row justify-content-center">
    <div class="text-center">
        <a href="@Url.Action("Index", "Cart")"><button type="submit" class="btn btn-white btn-rounded back-button">Go back</button></a>
    </div>
</div>
<div class="col-md-9 justify-content-center">
    <div class="card card-custom pb-4">
        <div class="card-body mt-0 mx-5">
            <div class="text-center mb-3 pb-2 mt-3">
                <h4 style="color: #495057 ;">Delivery Details</h4>
            </div>

            <script>
                console.log(@ViewBag.sig);
            </script>

            @using (Html.BeginForm("Index", "Order", FormMethod.Post, new { enctype = "multipart/form-data", @class = "mb-0" }))
            {
                @Html.AntiForgeryToken()
                <div class="row mb-4">
                    <div class="col">
                        <div class="form-outline">
                            <label class="form-label" for="form9Example1">First name</label>
                            <input type="text" id="FirstNameHidden" style="display: none;" value="" />
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control input-custom" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-outline">
                            <label class="form-label" for="form9Example2">Last name</label>
                            <input type="text" id="LastNameHidden" style="display: none;" value="" />
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control input-custom" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row mb-12">
                    <div class="col">
                        <div class="form-outline">
                            <label class="form-label" for="form9Example6">Street Address</label>
                            @if (Model.Street != null)
                            {
                                @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control input-custom", placeholder = "Start typing to search", @value = Model.Street } })
                            }
                            else
                            {
                                @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control input-custom", placeholder = "Start typing to search" } })
                            }
                            <p id="liveLocation" class="btn btn-block btn-primary btn-rounded">Use Live Location</p>

                            @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row mb-12">
                    <div class="col">
                        <div class="form-outline">
                            <label class="form-label" for="typeEmail">Phone Number</label>
                            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control input-custom" } })
                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="AC" class="control-label col-md-2">I confirm my address is correct</label>
                    <div class="col-md-10">
                        <input type="checkbox" required name="AC" value="" oninvalid="setCustomValidity('The terms and conditions are required')" />
                    </div>
                </div>
                <div class="form-group">
                    <label for="TC" class="control-label col-md-2">I have read and agree to the <a href="@Url.Action("Conditions","Conditions")" target="_blank">Terms And Conditions</a></label>
                    <div class="col-md-10">
                        <input type="checkbox" required name="TC" value="" oninvalid="setCustomValidity('The terms and conditions are required')" />
                    </div>
                </div>
                <div class="float-end ">
                    <!-- Submit button -->
                    <button type="submit" class="btn btn-primary btn-rounded"
                            style="background-color: #0062CC ;">
                        Place order
                    </button>
                </div>

            }
        </div>
    </div>
</div>
